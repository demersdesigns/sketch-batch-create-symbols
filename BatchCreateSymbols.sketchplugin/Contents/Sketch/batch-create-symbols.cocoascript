var generateSelection = function (context) {
  var api = context.api(),
    selectedDoc = api.selectedDocument,
    page = selectedDoc.selectedPage,
    doc = context.document,
    selection = context.selection,
    selections = selection.objectEnumerator();

  return {
    api: api,
    doc: selectedDoc,
    page: page,
    document: doc,
    selection: selection,
    selectionsArray: selections
  }
};

var createSymbols = function (context) {
  var s = generateSelection(context);
  //Loop over the selected layers/groups and add them to the symbols page
  while (s.selection = s.selectionsArray.nextObject()) {
    var symbols = MSLayerArray.arrayWithLayers([s.selection]);
    var symbolName = s.selection.name();
    var createSymbol = MSSymbolCreator.createSymbolFromLayers_withName_onSymbolsPage(symbols, symbolName, true);
  }
};

var createSymbolsWithPrefix = function (context) {
  var s = generateSelection(context);
  
  //Get user input and use it to name the symbols
  var symbolNamePrefix = s.api.getStringFromUser('Symbol Prefix', '');
  
  //handle cancel button
  if (symbolNamePrefix == nil) {
    return
  }
  
  //Loop over the selected layers/groups and add them to the symbols page
  while (s.selection = s.selectionsArray.nextObject()) {
    var symbols = MSLayerArray.arrayWithLayers([s.selection]);
    var symbolName = symbolNamePrefix + s.selection.name();
    var createSymbol = MSSymbolCreator.createSymbolFromLayers_withName_onSymbolsPage(symbols, symbolName, true);
  }
};

var createCustomSymbols = function (context) {
  var s = generateSelection(context);
  var idx = 0;

  //Get user input and use it to name the symbols
  var symbolNameOverride = s.api.getStringFromUser('Custom Name: [YOUR TEXT]-#', '');

  //handle cancel button
  if (symbolNameOverride == nil) {
    return
  }

  //handle submission of empty input
  if (symbolNameOverride == '') {
    s.api.message('Please enter a custom symbol name.');
    return
  }

  //Loop over the selected layers/groups update their names and add them to the symbols page
  while (s.selection = s.selectionsArray.nextObject()) {
    idx++;
    var symbols = MSLayerArray.arrayWithLayers([s.selection]);
    //TODO: Clean this up
    var symbolName = symbolNameOverride + '-' + idx;
    var createSymbol = MSSymbolCreator.createSymbolFromLayers_withName_onSymbolsPage(symbols, symbolName, true);
  }
};

var createCustomSymbolWithFolder = function(context){
  var s = generateSelection(context);

  //Get user input and use it to name the symbols
  var symbolNameOverride = s.api.getStringFromUser('Custom Folder: Folder/Sub-Folder/', '');

  //handle cancel button
  if (symbolNameOverride == nil) {
    return
  }

  //handle submission of empty input
  if (symbolNameOverride == '') {
    s.api.message('Please enter a custom symbol name.');
    return
  }

  //Loop over the selected layers/groups update their names and add them to the symbols page
  while (s.selection = s.selectionsArray.nextObject()) {
    var slashCheck = /^(?!^\/[a-z]{2}\/$).*\/$/;
    var symbols = MSLayerArray.arrayWithLayers([s.selection]);
    //Check to make sure entry ends with a slash
    if(slashCheck.exec(symbolNameOverride) !== null){
        var folderName = symbolNameOverride;
    } else {
        s.api.message('Please be sure your entry ends with a /.');
        return
    }
    var symbolName = folderName + s.selection.name();
    var createSymbol = MSSymbolCreator.createSymbolFromLayers_withName_onSymbolsPage(symbols, symbolName, true);
  }
}
